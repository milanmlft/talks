---
title: "R packages: What, Why and How?"
subtitle: "[HTA Hackathon Belfast 2024](https://n8thangreen.github.io/htahack2024/)"
date: 2024-08-06
author: "Milan Malfait"
format:
  revealjs:
    footer: "*{{< meta title >}}*"
---

## What

- R packages are the fundamental units of reproducible R code^[1]^
- They bundle together code, data, documentation, and tests, and are easy to
  share with others

. . .

![](figures/r-package-structure.png){width=60% fig-align="center" fig-alt="R
package structure"}

[1]: https://r-pkgs.org/introduction.html

## But Why?

- Code sharing / reproducibility
- Convenience
- Conventions, good practices
- It makes you look really cool

## How

::: {style="margin-top: 200px; font-size: 1.2em;"}

What if I told you you can create an R package

::: {.fragment}

::: {.fragment .highlight-red}

_in just 10 minutes_

:::

:::

::: {.fragment style="text-align: center; font-size: 2em;"}

ü§Ø

:::

:::

## [{devtools}](https://devtools.r-lib.org) to the rescue

```{.r}
library(devtools)
create_package("~/htahackathon2024/stringsplitter")
use_git()
use_r("split-string.R")
```

1. Set up package structure
2. Set up version control
3. Add our first function

## Add our first function

```{.r filename="R/split-string.R"}
splitstring <- function(x, sep = ",") {
  strsplit(x, split = sep)[[1]]
}
```

## üèéÔ∏è Test drive

```{.r}
load_all()
splitstring("a,b,c")
#> [1] "a" "b" "c"
```

. . .

<br>

```{.r}
check()
#> ... (output truncated) ...
#> ‚îÄ‚îÄ R CMD check ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#> ‚úî  checking DESCRIPTION meta-information ...
#> ‚úî  checking R files for syntax errors ...
#> ‚úî  checking whether the package can be loaded ...
#> ‚úî  checking R code for possible problems (1.3s)
#> ‚úî  checking examples ...
#>
#>
#> ‚îÄ‚îÄ R CMD check results ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ stringsplitter 0.0.1 ‚îÄ‚îÄ‚îÄ‚îÄ
#>
#> 0 errors ‚úî | 0 warnings ‚úî | 0 notes ‚úî
```

## üèéÔ∏è Test drive

::: {.callout-note .nonincremental}

## RStudio keyboard shortcuts

- `Shift + Ctrl/Cmd + L` to load all
- `Shift + Ctrl/Cmd + E` to run checks :::

## üìù Add documentation

Write some documentation in [roxygen format][roxygen] for your new function

. . .

::: {.callout-tip}

In RStudio, go to `Code -> Insert Roxygen skeleton` to make
your life easier

:::

[roxygen]: https://roxygen2.r-lib.org/articles/rd.html

## üìù Document your function {auto-animate=true}

```{.r filename="R/split-string.R"}
splitstring <- function(x, sep = ",") {
  strsplit(x, split = sep)[[1]]
}
```

## üìù Document your function {auto-animate=true}

```{.r filename="R/split-string.R"}
#' Split a string into a vector of strings
#'
#' @param x a character string to be split
#' @param sep the separator on which to split
#'
#' @return a vector of strings
#' @export
#'
#' @examples
#' splitstring("alfa,bravo,charlie")
#' splitstring("alfa,bravo charlie", sep = " ")
splitstring <- function(x, sep = ",") {
  strsplit(x, split = sep)[[1]]
}
```

. . .

Generate the help pages by running `document()`

or `Ctrl/Cmd + Shift + D` in RStudio

## üìù Make `splitstring()` available

```{.r filename="R/split-string.R" code-line-numbers="7"}
#' Split a string into a vector of strings
#'
#' @param x a character string to be split
#' @param sep the separator on which to split
#'
#' @return a vector of strings
#' @export
#'
#' @examples
#' splitstring("alfa,bravo,charlie")
#' splitstring("alfa,bravo charlie", sep = " ")
splitstring <- function(x, sep = ",") {
  strsplit(x, split = sep)[[1]]
}
```

. . .

`document()` will update the [`NAMESPACE` file][namespace] for us

[namespace]: https://r-pkgs.org/dependencies-mindset-background.html#sec-dependencies-namespace

## üì¶ Build and install

```{.r}
install()
#> ‚îÄ‚îÄ R CMD build ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
#> ‚úî  checking for file ‚Äò/Users/milan/htahackathon2024/stringsplitter/DESCRIPTION‚Äô ...
#> ‚îÄ  preparing ‚Äòstringsplitter‚Äô:
#> ‚úî  checking DESCRIPTION meta-information ...
#> ‚îÄ  checking for LF line-endings in source and make files and shell scripts
#> ‚îÄ  checking for empty or unneeded directories
#> ‚îÄ  building ‚Äòstringsplitter_0.0.1.tar.gz‚Äô
#>
#> ... output truncated ...
#>
#> ** testing if installed package can be loaded from temporary location
#> ** testing if installed package can be loaded from final location
#> ** testing if installed package keeps a record of temporary installation path
#> * DONE (stringsplitter)
```

. . .

üéâ Success!

```{.r}
library(stringsplitter)
splitstring("a,b,c")
#> [1] "a" "b" "c"
```

## Some Good Practices {.center .smaller}

> _One of the things research programmers struggle with is the transition from
> exploration to infrastructure, i.e., from ‚Äúcoding to figure out what the
> problem is‚Äù to ‚ÄúI‚Äôm building a reusable tool‚Äù. Habits from the first are often
> carried over to the second._

-- Tweet from [Greg Wilson 2018][wilson]

[wilson]: https://twitter.com/gvwilson/status/1028964474135429122

## Don't trust `rm(list = ls())`

::: {.callout-important}

If the first line of your R script is

```{.r code-line-numbers="false" style="font-size: 200%;"}
rm(list = ls())
```

I will come into your office and SET YOUR COMPUTER ON FIRE üî•

:::

::: {style="font-size: 60%;"}

-- [Zen And The aRt Of Workflow Maintenance -
Jenny Bryan][bryan-zen-37]

:::

. . .

<br>

Instead [start R with a clean slate and restart often][wtfr-restart]

[bryan-zen-37]: https://speakerdeck.com/jennybc/zen-and-the-art-of-workflow-maintenance?slide=37
[wtfr-restart]: https://rstats.wtf/source-and-blank-slates#always-start-r-with-a-blank-slate

## Restart your R session regularly

:::: {.columns}

::: {.column}

![Change these settings in RStudio](figures/rstudio-settings.png){fig-align="center" fig-alt="Recommended RStudio settings"}

:::

::: {.column}

![](figures/rstudio-restart.png){width=80% fig-align="center" fig-alt="Restart RStudio"}

:::

::::

##

![](figures/if-you-liked-it-you-should-have-saved-the-source-for-it.jpg)

::: {style="font-size: 60%;"}

-- [Saving Source and blank slates | What They Forgot to Teach You About R][wtfr-saving-source]

:::

[wtfr-saving-source]: https://rstats.wtf/source-and-blank-slates

## Don't do `setwd()`

::: {.callout-important}

If the first line of your R script is

```{.r code-line-numbers="false" style="font-size: 200%;"}
setwd("C:\Users\myself\path\that\only\I\have")
```

I will come into your office and SET YOUR COMPUTER ON FIRE üî•

:::

::: {style="font-size: 60%;"}

-- [Zen And The aRt Of Workflow Maintenance - Jenny Bryan][bryan-zen-47]

:::

. . .

<br>

Use a [project-oriented workflow][wtfr-projects] instead

[bryan-zen-47]: https://speakerdeck.com/jennybc/zen-and-the-art-of-workflow-maintenance?slide=47
[wtfr-projects]: https://rstats.wtf/projects

## Advanced topics {.center}

## Debugging

![](figures/debugging.jpg){fig-align="center" fig-alt="What debugging feels
like"}

## Code formatting

![](figures/code-formatting-meme.png){width=50% fig-align="center" fig-alt="Code
formatting meme"}

::: {style="text-align: center;"}
_Because readability **is** important_

:::

## Do's and don'ts

```{.r}
# Don‚Äôt do this
if(x<100){
  y<-200}

# Do this instead
if (x < 100) {
  y <- 200
}


# NEVER use the shorthand versions of TRUE and FALSE
# Why? This is why:
T <- FALSE # this is valid R code # <1>
```

1. If you really want to mess with someone's R code, see [evil.R][evil-R]

[evil-R]: https://github.com/romainfrancois/evil.R/blob/397639f0ba6ddd8b6ff28d455016dacf4d444e73/R/evil.R#L49-L50

## Resources

::: {.nonincremental}

- [_R Packages_][r-pkgs] by Hadley Wickham and Jenny Bryan ‚Äì _The Golden
  Standard_
- [_What They Forgot to Teach You About R_][wtf-r] by Jenny Bryan

<br>

- [_Tidyverse style guide_][tidyverse-style]
- [_‚ÄúBetter packages‚Äù_][better-packages] presentation by Ma√´lle Salmon
- [_Advanced R_][adv-r] by Hadley Wickham

:::

[r-pkgs]: https://r-pkgs.org
[wtf-r]: https://rstats.wtf
[tidyverse-style]: https://style.tidyverse.org
[better-packages]: https://rpkgdev-rocket-2024.netlify.app/taste-abilities/slides/#/
[adv-r]: https://adv-r.hadley.nz
